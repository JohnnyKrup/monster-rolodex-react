{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","key","input","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"utBAGA,IAiBMA,EAAUC,IAAOC,IAAV,KAkBEC,EAnCF,SAACC,GAKZ,OACE,kBAACJ,EAAD,KACE,yBACEK,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAEL,4BAAKJ,EAAMG,QAAQE,MACnB,2BAAIL,EAAMG,QAAQG,S,0LCXxB,IAaMV,EAAUC,IAAOC,IAAV,KAQES,EArBE,SAACP,GAAW,IACnBQ,EAAaR,EAAbQ,SAER,OACE,kBAAC,EAAD,KACGA,GACCA,EAASC,KAAI,SAACN,GACZ,OAAO,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,S,0NCRjD,IAMMP,EAAUC,IAAOc,MAAV,KAUEC,EAhBG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,kBAAC,EAAD,CAASC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,KCmGhDG,E,kDAlGb,aAAe,IAAD,8BACZ,gBAqCFH,aAAe,SAACI,GACd,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SArCxB,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IALH,E,gEAkBO,IAAD,OAUlBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEX,SAAUoB,S,+BA4BtC,MAM2BC,KAAKN,MAA/Bf,EAND,EAMCA,SAAUY,EANX,EAMWA,YACZU,EAAmBtB,EAASuB,QAAO,SAAC5B,GAAD,OACvCA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAOlD,OACE,6BACE,yBAAKE,UAAU,OACb,gDAWA,kBAAC,EAAD,CACErB,YAAY,kBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUN,SAAUsB,U,GA5FZK,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8515ed66.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Card = (props) => {\r\n  /**\r\n   * API call to get random monster images\r\n   * https://robohash.org\r\n   */\r\n  return (\r\n    <Wrapper>\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #95dada;\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n  padding: 25px;\r\n  cursor: pointer;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  backface-visibility: hidden;\r\n  transform: translateZ(0);\r\n  transition: transform 0.25s ease-out;\r\n\r\n  :hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Card from \"../card/card.component\";\r\n\r\nconst CardList = (props) => {\r\n  const { monsters } = props;\r\n  // console.log(monsters);\r\n  return (\r\n    <Wrapper>\r\n      {monsters &&\r\n        monsters.map((monster) => {\r\n          return <Card key={monster.id} monster={monster} />;\r\n        })}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  width: 85vw;\r\n  margin: 0 auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr;\r\n  grid-gap: 20px;\r\n`;\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <Wrapper type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.input`\r\n  -webkit-appearance: none;\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px;\r\n  width: 180px;\r\n  line-height: 1.5rem;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n\n    /**\n     * since we don't want to write this for every function that we create\n     * we can use arrowFunctions = () => they will do this for us\n     * instead of handleCHange(e) {...}\n     * we write handleChange = (e) => {...}\n     * then 'this.handleChange.bind(this)' is not needed\n     */\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    /**\n     * every then of a promise is wrapping the value of the previous then\n     * in a resolve promise, only that's why we can access it in the current\n     * then\n     *\n     * fetch() returns a promise\n     *\n     * API call to get dummy users https://jsonplaceholder.typicode.com/users\n     */\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  /**\n   * make this it's own function, in case we want to use it elsewhere\n   * the arrow function is automatically bound to the context, where it is written\n   * since we wrote this method in the App class, it automatically binds hanldeChange to the App class\n   */\n  handleChange = (e) => {\n    this.setState({\n      searchField: e.target.value,\n    });\n\n    /**\n     * the state is always one key behind, compared to what the user typed\n     *  because setState is an async call\n     * if you console log the state as a 2nd argument in setState it is a sync call\n     * and we get our results immediately ,() => console.log(this.state)\n     * console.log(this.state);\n     */\n  };\n\n  /**\n   * you cannot run setState in render(), as setState triggers render()\n   * it would cause an infinite loop\n   * that's why we are not calling onChange, we just define it\n   * so that it can get triggered by the user\n   */\n  render() {\n    /**\n     * this is equal to creating two new const\n     * const monsters = this.state.monsters\n     * constsearchField = this.state.searchField\n     */\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    /**\n     * onChange calls setState => setState calls render => filteredMonsters\n     * gets the new value from this.state monsters & searchfield\n     */\n    return (\n      <div>\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n\n          {/* \n            make a component of the searchBox \n            <input\n            onChange={(e) => this.handleChange(e)}\n            type=\"search\"\n            placeholder=\"search monsters\"\n          /> */}\n\n          {/* 'this.handleChange' is equal to '(e) => this.handleChange(e)' */}\n          <SearchBox\n            placeholder=\"search monsters\"\n            handleChange={this.handleChange}\n          />\n          <CardList monsters={filteredMonsters} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}